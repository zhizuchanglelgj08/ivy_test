计算属性 VS 监听属性
    计算属性具有缓存性，计算所得的值如果没有发生变化，则不会重新渲染
    监听器提供了更通用的方法，适合执行异步操作或较大开销操作的情况

生命周期
    beforeCreate、createed、beforeMounted、mounted、beforeUpdate、updated、brforeDestroy、destroyed
    页面初始化触发：beforeCreate、create d、beforeMounted、mounted
    页面更新时触发：beforeUpdate、updated
    页面销毁时触发：brforeDestroy、destroyed

    使用场景分析
    {
        beforeCreate(){} // 执行时组件实例还未创建，通常用于插件开发中执行一些初始化任务 created(){} // 组件初始化完毕，各种数据可以使用，常用于异步数据获取 beforeMount(){} // 未执行渲染、更新，dom未创建
        mounted(){} // 初始化结束，dom已创建，可用于获取访问数据和dom元素 beforeUpdate(){} // 更新前，可用于获取更新前各种状态
        updated(){} // 更新后，所有状态已是最新
        beforeDestroy(){} // 销毁前，可用于一些定时器或订阅的取消
        destroyed(){} // 组件已销毁，作用同上
    }

组件化
    组件注册、使用及数据传递
    自定义v-model语法糖  父组件上v-model  =》 到自组件中   v-on:input = "$emit('input',e.target.value)"  + :value = 'value'

插槽分发内容
    具名插槽v-slot:name

Vue组件化的理解
    定义:组件是可复用的 Vue 实例，准确讲它们是VueComponent的实例，继承自Vue。 
    优点:从上面案例可以看出组件化可以增加代码的复用性、可维护性和可测试性。
    使用场景:什么时候使用组件?以下分类可作为参考:

    通用组件:实现最基本的功能，具有通用性、复用性，例如按钮组件、输入框组件、布局组件等。 
    业务组件:它们完成具体业务，具有一定的复用性，例如登录组件、轮播图组件。 
    页面组件:组织应用各部分独立内容，需要时在不同页面组件间切换，例如列表页、详情页组件

    如何使用组件
        定义:Vue.component()//全局定义，components选项//局部定义，sfc//单文件组件
        分类:有状态组件，functional，abstract//比如防抖组件
        通信:props，$emit()/$on()，provide/inject，$children/$parent/$root/$attrs/$listeners 
        内容分发:<slot>，<template>，v-slot
        使用及优化:is，keep-alive，异步组件

    组件的本质
        vue中的组件经历如下过程：组件配置 => VueComponent实例 => render() => Virtual DOM=> DOM
        所以组件的本质是产生虚拟DOM