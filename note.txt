计算属性 VS 监听属性
    计算属性具有缓存性，计算所得的值如果没有发生变化，则不会重新渲染
    监听器提供了更通用的方法，适合执行异步操作或较大开销操作的情况

生命周期
    beforeCreate、createed、beforeMounted、mounted、beforeUpdate、updated、brforeDestroy、destroyed
    页面初始化触发：beforeCreate、create d、beforeMounted、mounted
    页面更新时触发：beforeUpdate、updated
    页面销毁时触发：brforeDestroy、destroyed

    使用场景分析
    {
        beforeCreate(){} // 执行时组件实例还未创建，通常用于插件开发中执行一些初始化任务 created(){} // 组件初始化完毕，各种数据可以使用，常用于异步数据获取 beforeMount(){} // 未执行渲染、更新，dom未创建
        mounted(){} // 初始化结束，dom已创建，可用于获取访问数据和dom元素 beforeUpdate(){} // 更新前，可用于获取更新前各种状态
        updated(){} // 更新后，所有状态已是最新
        beforeDestroy(){} // 销毁前，可用于一些定时器或订阅的取消
        destroyed(){} // 组件已销毁，作用同上
    }

组件化
    组件注册、使用及数据传递
    自定义v-model语法糖  父组件上v-model  =》 到自组件中   v-on:input = "$emit('input',e.target.value)"  + :value = 'value'

插槽分发内容
    具名插槽v-slot:name

Vue组件化的理解
    定义:组件是可复用的 Vue 实例，准确讲它们是VueComponent的实例，继承自Vue。 
    优点:从上面案例可以看出组件化可以增加代码的复用性、可维护性和可测试性。
    使用场景:什么时候使用组件?以下分类可作为参考:

    通用组件:实现最基本的功能，具有通用性、复用性，例如按钮组件、输入框组件、布局组件等。 
    业务组件:它们完成具体业务，具有一定的复用性，例如登录组件、轮播图组件。 
    页面组件:组织应用各部分独立内容，需要时在不同页面组件间切换，例如列表页、详情页组件

    如何使用组件
        定义:Vue.component()//全局定义，components选项//局部定义，sfc//单文件组件
        分类:有状态组件，functional，abstract//比如防抖组件
        通信:props，$emit()/$on()，provide/inject，$children/$parent/$root/$attrs/$listeners 
        内容分发:<slot>，<template>，v-slot
        使用及优化:is，keep-alive，异步组件

    组件的本质
        vue中的组件经历如下过程：组件配置 => VueComponent实例 => render() => Virtual DOM=> DOM
        所以组件的本质是产生虚拟DOM

Vue必会API盘点
    数据相关Api
        Vue.set 动态的添加属性          vm.$set
        Vue.delete 动态的删除属性       vm.$delete
    
    事件相关Api
        vm.$on 监听派发事件，事件可以由vm.$emit触发
        vm.$emit 派发事件
        vm.$once  监听一个自定义事件，但是只触发一次。一旦触发后，监听器就会被移除 
        vm.$off()移除自定义事件监听器。无参数移除所有的事件监听器，一个参数移除该事件的所有监听器，两个参数只移除这个回调的监听器

        事件总线
        通过在Vue原型上添加一个vue实例作为事件总线，实现组件间相互通信，而且不受组件间关系的影响。
        Vue.prototype.$bus = new Vue()
            可以在任意组件中使用this.$bus访问到该实例
    
    组件或元素引用
        ref和vm.$refs    挂载完成之后才可以访问$refs
        ref被用来给元素或子组件注册引用信息，引用信息将会注册在父组件的$refs对象上。
        如果在普通的DOM元素上使用，指向的就是DOM元素；如果用在子组件上，引用指向组件。
        注意:{
            ref是作为渲染结果被创建的，在初始渲染时不能访问
            $refs不是响应式的，不要视图用它在模版中做数据绑定
            当v-for用于元素或组件时，引用信息将包含DOM节点或组件实例的数组
        }

Vue过渡&动画
    Vue在插入、更新或移除DOM时，提供多种不同方式的应用过渡效果。
    包括一下工具： 
        1.在CSS过渡和动画中自应用class
        2.可以配合第三方CSS动画库，如Animate.css
        3.在过渡钩子函数中使用JavaScript直接操作DOM
        4.可以配合使用第三方JavaScript动画库，如Velocity.js

Vue可复用性
    过滤器  (Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化。)
        在双花括号中
            {{rawId ｜ rawId}}
        在 v-bind 中
            <div v-bind:id ="rawId | formatId" ></div>

        {{ c.price | currency('RMB')}}
        filter:{
            currency(value,symbol = '¥'){
                return symbol + value
            }
        }
        全局 Vue.filter(name,callback)
        组件 fliter:{
            name(value){
                return value
            }
        }

    自定义指令（使用场景：对普通DOM元素进行底层操作）Vue.directive()
        E.g:{
            输入框获取焦点
            Vue.directive('focus',{
                inserted(el){
                    el.focus();
                }
            })
            使用 <input v-focus />

            按钮权限控制
            const role = 'user';
            Vue.directive('permission',{
                inserted(el){
                    if(role !== 'admin'){
                        el.parentElement.removeChild(el)
                    }
                }
            })
            使用 <div class="toolbar" v-permission="'admin'">  注意
        }